
Execution tree of successfully compiled PL/pgSQL function aaa(bit varying):

Function's data area:
    entry 0: VAR b                type varbit (typoid 1562) atttypmod -1
    entry 1: VAR found            type bool (typoid 16) atttypmod -1
    entry 2: VAR uwu              type bytea (typoid 17) atttypmod -1
                                  DEFAULT '''::bytea'
    entry 3: VAR i                type int4 (typoid 23) atttypmod -1

Function's statements:
  4:BLOCK <<*unnamed*>>
  5:  FORI i REVERSE
        lower = 'length(b)'
        upper = '1'
        step = '32'
  6:    ASSIGN var 2 := 'uwu := decode(lpad(to_hex(substring(b FROM i-31 FOR 32)::int), 8, '0'), 'hex') || uwu'
      ENDFORI
  8:  RETURN variable 2
    END -- *unnamed*

End of execution tree of function aaa(bit varying)


Execution tree of successfully compiled PL/pgSQL function aab(bytea):

Function's data area:
    entry 0: VAR b                type bytea (typoid 17) atttypmod -1
    entry 1: VAR found            type bool (typoid 16) atttypmod -1

Function's statements:
  2:BLOCK <<*unnamed*>>
  3:  RETURN 'right(b::text, -1)::varbit'
    END -- *unnamed*

End of execution tree of function aab(bytea)


Execution tree of successfully compiled PL/pgSQL function aba(bytea,bytea):

Function's data area:
    entry 0: VAR a                type bytea (typoid 17) atttypmod -1
    entry 1: VAR b                type bytea (typoid 17) atttypmod -1
    entry 2: VAR found            type bool (typoid 16) atttypmod -1

Function's statements:
  2:BLOCK <<*unnamed*>>
  3:  RETURN 'aaa(aab(a)::bit(128) # aab(b)::bit(128))'
    END -- *unnamed*

End of execution tree of function aba(bytea,bytea)


Execution tree of successfully compiled PL/pgSQL function baa(bytea):

Function's data area:
    entry 0: VAR b                type bytea (typoid 17) atttypmod -1
    entry 1: VAR found            type bool (typoid 16) atttypmod -1
    entry 2: VAR owo              type bytea (typoid 17) atttypmod -1
                                  DEFAULT ''\x637c777bf26b6fc53001672bfed7ab76ca82c97dfa5947f0add4a2af9ca472c0b7fd9326363ff7cc34a5e5f171d8311504c723c31896059a071280e2eb27b27509832c1a1b6e5aa0523bd6b329e32f8453d100ed20fcb15b6acbbe394a4c58cfd0efaafb434d338545f9027f503c9fa851a3408f929d38f5bcb6da2110fff3d2cd0c13ec5f974417c4a77e3d645d197360814fdc222a908846eeb814de5e0bdbe0323a0a4906245cc2d3ac629195e479e7c8376d8dd54ea96c56f4ea657aae08ba78252e1ca6b4c6e8dd741f4bbd8b8a703eb5664803f60e613557b986c11d9ee1f8981169d98e949b1e87e9ce5528df8ca1890dbfe6426841992d0fb054bb16'::bytea'
    entry 3: VAR uwu              type bytea (typoid 17) atttypmod -1
                                  DEFAULT 'b'
    entry 4: VAR i                type int4 (typoid 23) atttypmod -1

Function's statements:
  5:BLOCK <<*unnamed*>>
  6:  FORI i NORMAL
        lower = '0'
        upper = 'length(b)-1'
  7:    ASSIGN var 3 := 'uwu := set_byte(uwu, i, get_byte(owo, get_byte(b, i)))'
      ENDFORI
  9:  RETURN variable 3
    END -- *unnamed*

End of execution tree of function baa(bytea)


Execution tree of successfully compiled PL/pgSQL function bab(bytea):

Function's data area:
    entry 0: VAR nya              type bytea (typoid 17) atttypmod -1
    entry 1: VAR found            type bool (typoid 16) atttypmod -1
    entry 2: VAR pnq              type int4 (typoid 23) atttypmod -1
    entry 3: VAR qop              type int4 (typoid 23) atttypmod -1
    entry 4: VAR qwq              type _bit (typoid 1561) atttypmod 32
    entry 5: VAR unu              type _bit (typoid 1561) atttypmod 32
    entry 6: VAR eoe              type _bit (typoid 1561) atttypmod 32
                                  DEFAULT 'array[1, 2, 4, 8, 16, 32, 64, 128, 27, 54]::bit(32)[]'
    entry 7: VAR i                type int4 (typoid 23) atttypmod -1
    entry 8: VAR i                type int4 (typoid 23) atttypmod -1
    entry 9: VAR wee              type bit (typoid 1560) atttypmod 32
    entry 10: VAR yay              type _bytea (typoid 1001) atttypmod -1
    entry 11: VAR i                type int4 (typoid 23) atttypmod -1

Function's statements:
  9:BLOCK <<*unnamed*>>
 10:  IF 'length(nya) = 16' THEN
 11:    ASSIGN var 2 := 'pnq := 4'
 11:    ASSIGN var 3 := 'qop := 11'
      ELSIF 'length(nya) = 24' THEN
 13:    ASSIGN var 2 := 'pnq := 6'
 13:    ASSIGN var 3 := 'qop := 13'
      ELSIF 'length(nya) = 32' THEN
 15:    ASSIGN var 2 := 'pnq := 8'
 15:    ASSIGN var 3 := 'qop := 15'
      ELSE
 17:    RAISE level=21 message='die nya'
      ENDIF
 20:  FORI i NORMAL
        lower = '0'
        upper = 'pnq-1'
 21:    ASSIGN var 4 := 'qwq[i] := aab(substring(nya FROM i*4+1 FOR 4))::bit(32)'
      ENDFORI
 25:  FORI i NORMAL
        lower = '0'
        upper = '(4*qop-1)'
 26:    IF 'i < pnq' THEN
 27:      ASSIGN var 5 := 'unu[i] := qwq[i]'
        ELSE
 29:      CASE 0 
            WHEN 'i % pnq = 0'
            THEN
 33:                BLOCK <<*unnamed*>>
 34:                  ASSIGN var 9 := 'wee := (unu[i-1] << 8) | (unu[i-1] >> 24)'
 35:                  ASSIGN var 5 := 'unu[i] := unu[i-pnq] # aab(baa(aaa(wee)))::bit(32) # (eoe[i/pnq] << 24)'
                    END -- *unnamed*
            WHEN 'pnq > 6 AND i % pnq = 4'
            THEN
 38:                ASSIGN var 5 := 'unu[i] := unu[i-pnq] # aab(baa(aaa(unu[i-1])))::bit(32)'
            ELSE
 40:                ASSIGN var 5 := 'unu[i] := unu[i-pnq] # unu[i-1]'
          ENDCASE
        ENDIF
      ENDFORI
 47:  BLOCK <<*unnamed*>>
 48:    FORI i NORMAL
          lower = '0'
          upper = 'qop-1'
 49:      ASSIGN var 10 := 'yay[i] := aaa(unu[i*4] || unu[i*4+1] || unu[i*4+2] || unu[i*4+3])'
        ENDFORI
 51:    RETURN variable 10
      END -- *unnamed*
    END -- *unnamed*

End of execution tree of function bab(bytea)


Execution tree of successfully compiled PL/pgSQL function bba(bytea):

Function's data area:
    entry 0: VAR b                type bytea (typoid 17) atttypmod -1
    entry 1: VAR found            type bool (typoid 16) atttypmod -1
    entry 2: VAR owo              type _int4 (typoid 1007) atttypmod -1
                                  DEFAULT 'array[1, 6, 11, 16, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12]::int[]'
    entry 3: VAR uwu              type bytea (typoid 17) atttypmod -1
                                  DEFAULT 'b'
    entry 4: VAR i                type int4 (typoid 23) atttypmod -1

Function's statements:
  5:BLOCK <<*unnamed*>>
  6:  ASSERT 'length(b) = 16'
  7:  FORI i NORMAL
        lower = '0'
        upper = '15'
  8:    ASSIGN var 3 := 'uwu := set_byte(uwu, i, get_byte(b, owo[i+1]-1))'
      ENDFORI
 10:  RETURN variable 3
    END -- *unnamed*

End of execution tree of function bba(bytea)


Execution tree of successfully compiled PL/pgSQL function abb(bytea,bytea):

Function's data area:
    entry 0: VAR lol              type bytea (typoid 17) atttypmod -1
    entry 1: VAR kek              type bytea (typoid 17) atttypmod -1
    entry 2: VAR found            type bool (typoid 16) atttypmod -1
    entry 3: VAR wuw              type _bytea (typoid 1001) atttypmod -1
    entry 4: VAR uwu              type bytea (typoid 17) atttypmod -1
    entry 5: VAR r                type int4 (typoid 23) atttypmod -1
    entry 6: VAR yea              type _int4 (typoid 1007) atttypmod -1
    entry 7: VAR nay              type _int4 (typoid 1007) atttypmod -1
    entry 8: VAR the              type int4 (typoid 23) atttypmod -1
    entry 9: VAR oof              type int4 (typoid 23) atttypmod -1
    entry 10: VAR i                type int4 (typoid 23) atttypmod -1
    entry 11: VAR c                type int4 (typoid 23) atttypmod -1

Function's statements:
  5:BLOCK <<*unnamed*>>
  6:  IF 'length(lol) <> 16' THEN
  7:    RAISE level=21 message='plaintext is not 128 bits'
      ENDIF
 10:  ASSIGN var 3 := 'wuw := bab(kek)'
 12:  ASSIGN var 4 := 'uwu := aba(lol, wuw[0])'
 14:  FORI r NORMAL
        lower = '1'
        upper = 'array_length(wuw, 1)-2'
 15:    ASSIGN var 4 := 'uwu := baa(uwu)'
 16:    ASSIGN var 4 := 'uwu := bba(uwu)'
 22:    BLOCK <<*unnamed*>>
 23:      FORI i NORMAL
            lower = '0'
            upper = '3'
 24:        FORI c NORMAL
              lower = '0'
              upper = '3'
 25:          ASSIGN var 9 := 'oof := get_byte(uwu, i*4 + c)'
 26:          ASSIGN var 6 := 'yea[c] := oof'
 27:          ASSIGN var 8 := 'the := (oof >> 7) & 1'
 28:          ASSIGN var 7 := 'nay[c] := (oof << 1) & 255'
 29:          ASSIGN var 7 := 'nay[c] := nay[c] # (the * 27)'
            ENDFORI
 31:        ASSIGN var 4 := 'uwu := set_byte(uwu, 4*i + 0, nay[0] # yea[3] # yea[2] # nay[1] # yea[1])'
 32:        ASSIGN var 4 := 'uwu := set_byte(uwu, 4*i + 1, nay[1] # yea[0] # yea[3] # nay[2] # yea[2])'
 33:        ASSIGN var 4 := 'uwu := set_byte(uwu, 4*i + 2, nay[2] # yea[1] # yea[0] # nay[3] # yea[3])'
 34:        ASSIGN var 4 := 'uwu := set_byte(uwu, 4*i + 3, nay[3] # yea[2] # yea[1] # nay[0] # yea[0])'
          ENDFORI
        END -- *unnamed*
 37:    ASSIGN var 4 := 'uwu := aba(uwu, wuw[r])'
      ENDFORI
 40:  ASSIGN var 4 := 'uwu := baa(uwu)'
 41:  ASSIGN var 4 := 'uwu := bba(uwu)'
 42:  ASSIGN var 4 := 'uwu := aba(uwu, wuw[array_length(wuw, 1)-1])'
 44:  RETURN variable 4
    END -- *unnamed*

End of execution tree of function abb(bytea,bytea)


Execution tree of successfully compiled PL/pgSQL function bbb(bytea):

Function's data area:
    entry 0: VAR lol              type bytea (typoid 17) atttypmod -1
    entry 1: VAR found            type bool (typoid 16) atttypmod -1
    entry 2: VAR wew              type bytea (typoid 17) atttypmod -1
                                  DEFAULT ''\x0000000077073096EE0E612C990951BA076DC419706AF48FE963A5359E6495A30EDB883279DCB8A4E0D5E91E97D2D98809B64C2B7EB17CBDE7B82D0790BF1D911DB710646AB020F2F3B9714884BE41DE1ADAD47D6DDDE4EBF4D4B55183D385C7136C9856646BA8C0FD62F97A8A65C9EC14015C4F63066CD9FA0F3D638D080DF53B6E20C84C69105ED56041E4A26771723C03E4D14B04D447D20D85FDA50AB56B35B5A8FA42B2986CDBBBC9D6ACBCF94032D86CE345DF5C75DCD60DCFABD13D5926D930AC51DE003AC8D75180BFD0611621B4F4B556B3C423CFBA9599B8BDA50F2802B89E5F058808C60CD9B2B10BE9242F6F7C8758684C11C1611DABB6662D3D76DC419001DB710698D220BCEFD5102A71B1858906B6B51F9FBFE4A5E8B8D4337807C9A20F00F9349609A88EE10E98187F6A0DBB086D3D2D91646C97E6635C016B6B51F41C6C6162856530D8F262004E6C0695ED1B01A57B8208F4C1F50FC45765B0D9C612B7E9508BBEB8EAFCB9887C62DD1DDF15DA2D498CD37CF3FBD44C654DB261583AB551CEA3BC0074D4BB30E24ADFA5413DD895D7A4D1C46DD3D6F4FB4369E96A346ED9FCAD678846DA60B8D044042D7333031DE5AA0A4C5FDD0D7CC95005713C270241AABE0B1010C90C20865768B525206F85B3B966D409CE61E49F5EDEF90E29D9C998B0D09822C7D7A8B459B33D172EB40D81B7BD5C3BC0BA6CADEDB883209ABFB3B603B6E20C74B1D29AEAD547399DD277AF04DB261573DC1683E3630B1294643B840D6D6A3E7A6A5AA8E40ECF0B9309FF9D0A00AE277D079EB1F00F93448708A3D21E01F2686906C2FEF762575D806567CB196C36716E6B06E7FED41B7689D32BE010DA7A5A67DD4ACCF9B9DF6F8EBEEFF917B7BE4360B08ED5D6D6A3E8A1D1937E38D8C2C44FDFF252D1BB67F1A6BC57673FB506DD48B2364BD80D2BDAAF0A1B4C36034AF641047A60DF60EFC3A867DF55316E8EEF4669BE79CB61B38CBC66831A256FD2A05268E236CC0C7795BB0B4703220216B95505262FC5BA3BBEB2BD0B282BB45A925CB36A04C2D7FFA7B5D0CF312CD99E8B5BDEAE1D9B64C2B0EC63F226756AA39C026D930A9C0906A9EB0E363F720767850500571395BF4A82E2B87A147BB12BAE0CB61B3892D28E9BE5D5BE0D7CDCEFB70BDBDF2186D3D2D4F1D4E24268DDB3F81FDA836E81BE16CDF6B9265B6FB077E118B7477788085AE6FF0F6A7066063BCA11010B5C8F659EFFF862AE69616BFFD3166CCF45A00AE278D70DD2EE4E0483543903B3C2A7672661D06016F74969474D3E6E77DBAED16A4AD9D65ADC40DF0B6637D83BF0A9BCAE53DEBB9EC547B2CF7F30B5FFE9BDBDF21CCABAC28A53B3933024B4A3A6BAD03605CDD7069354DE572923D967BFB3667A2EC4614AB85D681B022A6F2B94B40BBE37C30C8EA15A05DF1B2D02EF8D''
    entry 3: VAR uwu              type int4 (typoid 23) atttypmod -1
                                  DEFAULT '-1'
    entry 4: VAR pwp              type int4 (typoid 23) atttypmod -1
    entry 5: VAR uiu              type int4 (typoid 23) atttypmod -1
    entry 6: VAR i                type int4 (typoid 23) atttypmod -1

Function's statements:
  8:BLOCK <<*unnamed*>>
  9:  FORI i NORMAL
        lower = '0'
        upper = 'length(lol)-1'
 10:    ASSIGN var 5 := 'uiu := (uwu & 255) # get_byte(lol, i)'
 11:    ASSIGN var 4 := 'pwp := aab(substring(wew FROM uiu*4+1 FOR 4))::bit(32)::int'
 12:    ASSIGN var 3 := 'uwu := pwp # (uwu::bit(32)>>8)::int'
      ENDFORI
 14:  RETURN 'aaa((uwu # -1)::bit(32)::varbit)'
    END -- *unnamed*

End of execution tree of function bbb(bytea)


Execution tree of successfully compiled PL/pgSQL function lll(bytea,bytea):

Function's data area:
    entry 0: VAR lol              type bytea (typoid 17) atttypmod -1
    entry 1: VAR kek              type bytea (typoid 17) atttypmod -1
    entry 2: VAR found            type bool (typoid 16) atttypmod -1
    entry 3: VAR uou              type bytea (typoid 17) atttypmod -1
    entry 4: VAR uwu              type bytea (typoid 17) atttypmod -1
                                  DEFAULT '''::bytea'
    entry 5: VAR dub              type int4 (typoid 23) atttypmod -1
                                  DEFAULT 'length(lol) / 16'
    entry 6: VAR qop              type int4 (typoid 23) atttypmod -1
                                  DEFAULT 'length(lol) % 16'
    entry 7: VAR c                type int4 (typoid 23) atttypmod -1

Function's statements:
  7:BLOCK <<*unnamed*>>
  8:  FORI c NORMAL
        lower = '1'
        upper = 'dub'
  9:    ASSIGN var 3 := 'uou := abb(aaa(c::bit(128)::varbit), kek)'
 10:    ASSIGN var 4 := 'uwu := uwu || aba(substring(lol FROM (c-1)*16+1 FOR 16), uou)'
      ENDFORI
 13:  ASSIGN var 3 := 'uou := abb(aaa((dub+1)::bit(128)), kek)'
 14:  ASSIGN var 4 := 'uwu := uwu || substring(aba(substring(lol FROM dub*16+1), uou) FOR qop)'
 16:  RETURN variable 4
    END -- *unnamed*

End of execution tree of function lll(bytea,bytea)


Execution tree of successfully compiled PL/pgSQL function l1l(text,text):

Function's data area:
    entry 0: VAR lol              type text (typoid 25) atttypmod -1
    entry 1: VAR kek              type text (typoid 25) atttypmod -1
    entry 2: VAR found            type bool (typoid 16) atttypmod -1
    entry 3: VAR uwu              type bytea (typoid 17) atttypmod -1
                                  DEFAULT 'bbb((lol || kek || 'p3pp3r')::bytea)'
    entry 4: VAR i                type int4 (typoid 23) atttypmod -1

Function's statements:
  4:BLOCK <<*unnamed*>>
  5:  FORI i NORMAL
        lower = '2'
        upper = '4+(get_byte(uwu, 2) % 3)*2'
  6:    ASSIGN var 3 := 'uwu := uwu || bbb(substring(uwu FROM get_byte(uwu, length(uwu)-2) % 4))'
      ENDFORI
  8:  RETURN variable 3
    END -- *unnamed*

End of execution tree of function l1l(text,text)


Execution tree of successfully compiled PL/pgSQL function secret(text,text):

Function's data area:
    entry 0: VAR _name            type text (typoid 25) atttypmod -1
    entry 1: VAR _password        type text (typoid 25) atttypmod -1
    entry 2: VAR found            type bool (typoid 16) atttypmod -1
    entry 3: VAR key              type bytea (typoid 17) atttypmod -1
                                  DEFAULT 'l1l(_name, _password)'
    entry 4: VAR _content         type bytea (typoid 17) atttypmod -1

Function's statements:
  5:BLOCK <<*unnamed*>>
  6:  ASSIGN var 4 := '_content := ('\x' || (SELECT content FROM secrets WHERE name = _name))::bytea'
  7:  ASSIGN var 4 := '_content := lll(_content, key)'
  9:  IF 'bbb(_password::bytea) <> ('\x' || (SELECT password FROM secrets WHERE name = _name))::bytea OR 
        bbb(substring(_content FROM 5)) <> substring(_content FOR 4)' THEN
 11:    RAISE level=21 message='Check the password!'
      ENDIF
 14:  RETURN 'convert_from(substring(_content FROM 5), 'UTF8')'
    END -- *unnamed*

End of execution tree of function secret(text,text)

